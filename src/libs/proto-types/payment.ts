// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: payment.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "payment";

export interface Empty {
}

export interface PaymentRequest {
  userId: string;
  amount: number;
}

export interface PaymentResponse {
  success: boolean;
  message: string;
}

export const PAYMENT_PACKAGE_NAME = "payment";

export interface PaymentServiceClient {
  makePayment(request: PaymentRequest): Observable<PaymentResponse>;

  testMicroservice(request: Empty): Observable<PaymentResponse>;
}

export interface PaymentServiceController {
  makePayment(request: PaymentRequest): Promise<PaymentResponse> | Observable<PaymentResponse> | PaymentResponse;

  testMicroservice(request: Empty): Promise<PaymentResponse> | Observable<PaymentResponse> | PaymentResponse;
}

export function PaymentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["makePayment", "testMicroservice"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PAYMENT_SERVICE_NAME = "PaymentService";
